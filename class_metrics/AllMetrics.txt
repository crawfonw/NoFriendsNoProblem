=== File: import ===
=== File: random ===
=== File: from ===
=== File: CardObjects ===
=== File: import ===
=== File: Card ===
=== File: class ===
=== File: Deck(object): ===
=== File: def ===
=== File: __init__(self, ===
=== File: jokers=False): ===
=== File: self.cards ===
=== File: = ===
=== File: [] ===
=== File: suits ===
=== File: = ===
=== File: ["Clubs", ===
=== File: "Diamonds", ===
=== File: "Hearts", ===
=== File: "Spades"] ===
=== File: for ===
=== File: value ===
=== File: in ===
=== File: range(1, ===
=== File: 14): ===
=== File: for ===
=== File: suit ===
=== File: in ===
=== File: suits: ===
=== File: self.cards.append(Card(value, ===
=== File: suit)) ===
=== File: if ===
=== File: jokers: ===
=== File: self.cards.append(Card(0, ===
=== File: "Jokers")) ===
=== File: def ===
=== File: shuffle(self): ===
=== File: random.shuffle(self.cards) ===
=== File: def ===
=== File: draw(self): ===
=== File: return ===
=== File: self.cards.pop() ===
=== File: from ===
=== File: TableObjects ===
=== File: import ===
=== File: Table ===
=== File: from ===
=== File: TwentyFourPlayerObjects ===
=== File: import ===
=== File: TwentyFourPlayer ===
=== File: from ===
=== File: TwentyFourDeckObjects ===
=== File: import ===
=== File: TwentyFourDeck ===
=== File: from ===
=== File: TrickObjects ===
=== File: import ===
=== File: Trick ===
=== File: import ===
=== File: compiler ===
=== File: import ===
=== File: itertools ===
=== File: import ===
=== File: msvcrt ===
=== File: import ===
=== File: time ===
=== File: class ===
=== File: TimeoutException(Exception): ===
=== File: pass ===
=== File: class ===
=== File: TwentyFourTable(Table): ===
=== File: def ===
=== File: __init__(self): ===
=== File: self.players ===
=== File: = ===
=== File: [] ===
=== File: for ===
=== File: i ===
=== File: in ===
=== File: [0, ===
=== File: 1]: ===
=== File: self.players.append(TwentyFourPlayer()) ===
=== File: self.trick ===
=== File: = ===
=== File: Trick() ===
=== File: self.deck ===
=== File: = ===
=== File: TwentyFourDeck() ===
=== File: self.deck.shuffle() ===
=== File: self.deal(20) ===
=== File: self.timeout ===
=== File: = ===
=== File: 10 ===
=== File: # ===
=== File: lower ===
=== File: timeout ===
=== File: implies ===
=== File: higher ===
=== File: difficulty ===
=== File: def ===
=== File: play_game(self): ===
=== File: def ===
=== File: timeout_handler(signum, ===
=== File: frame): ===
=== File: raise ===
=== File: TimeoutException() ===
=== File: while ===
=== File: not ===
=== File: self.winner(): ===
=== File: if ===
=== File: len(self.trick.cards) ===
=== File: == ===
=== File: 0: ===
=== File: self.play_round() ===
=== File: if ===
=== File: not ===
=== File: self.find_solution(): ===
=== File: self.return_cards() ===
=== File: continue ===
=== File: for ===
=== File: i ===
=== File: in ===
=== File: [0, ===
=== File: 1]: ===
=== File: print('Player ===
=== File: {} ===
=== File: has ===
=== File: {} ===
=== File: cards ===
=== File: and ===
=== File: {} ===
=== File: points.'.format(i, ===
=== File: len(self.players[i].hand), ===
=== File: self.players[i].points)) ===
=== File: print('Make ===
=== File: 24 ===
=== File: out ===
=== File: of ===
=== File: these ===
=== File: cards:') ===
=== File: print(' ===
=== File: {}'.format(self.trick.cards)) ===
=== File: print('Press ===
=== File: any ===
=== File: key ===
=== File: to ===
=== File: buzz ===
=== File: in...') ===
=== File: start_time ===
=== File: = ===
=== File: time.time() ===
=== File: while ===
=== File: True: ===
=== File: if ===
=== File: msvcrt.kbhit(): ===
=== File: print ===
=== File: 'Human ===
=== File: player ===
=== File: buzzed ===
=== File: in!' ===
=== File: self.buzz_in(0) ===
=== File: break ===
=== File: else: ===
=== File: if ===
=== File: time.time() ===
=== File: - ===
=== File: start_time ===
=== File: > ===
=== File: self.timeout: ===
=== File: print ===
=== File: 'Computer ===
=== File: player ===
=== File: buzzed ===
=== File: in!' ===
=== File: self.buzz_in(1) ===
=== File: break ===
=== File: # ===
=== File: shouldn't ===
=== File: happen ===
=== File: with ===
=== File: new ===
=== File: buzzing ===
=== File: system, ===
=== File: but ===
=== File: just ===
=== File: in ===
=== File: case... ===
=== File: if ===
=== File: self.buzzed_in ===
=== File: != ===
=== File: 0 ===
=== File: and ===
=== File: self.buzzed_in ===
=== File: != ===
=== File: 1: ===
=== File: print('Invalid ===
=== File: input.') ===
=== File: continue ===
=== File: if ===
=== File: self.buzzed_in ===
=== File: == ===
=== File: 0: ===
=== File: print('What ===
=== File: is ===
=== File: your ===
=== File: guess?') ===
=== File: guess ===
=== File: = ===
=== File: raw_input('> ===
=== File: ') ===
=== File: if ===
=== File: not ===
=== File: self.is_valid_guess(guess): ===
=== File: print('Guess ===
=== File: is ===
=== File: invalid!') ===
=== File: continue ===
=== File: if ===
=== File: not ===
=== File: self.is_correct_guess(guess): ===
=== File: print('That ===
=== File: doesn\'t ===
=== File: make ===
=== File: 24!') ===
=== File: continue ===
=== File: elif ===
=== File: self.buzzed_in ===
=== File: == ===
=== File: 1: ===
=== File: print ===
=== File: 'The ===
=== File: computer ===
=== File: guessed ===
=== File: {}.'.format(self.find_solution()) ===
=== File: print('Player ===
=== File: {} ===
=== File: is ===
=== File: correct!'.format(self.buzzed_in)) ===
=== File: self.solve(self.buzzed_in) ===
=== File: print('') ===
=== File: print('Player ===
=== File: {} ===
=== File: has ===
=== File: won!'.format(self.winner())) ===
=== File: def ===
=== File: play_round(self): ===
=== File: self.trick.cards.append(self.players[0].hand.pop()) ===
=== File: self.trick.cards.append(self.players[0].hand.pop()) ===
=== File: self.trick.cards.append(self.players[1].hand.pop()) ===
=== File: self.trick.cards.append(self.players[1].hand.pop()) ===
=== File: def ===
=== File: return_cards(self): ===
=== File: print ===
=== File: "Couldn't ===
=== File: find ===
=== File: a ===
=== File: solution ===
=== File: to ===
=== File: current ===
=== File: trick. ===
=== File: Returning ===
=== File: cards ===
=== File: to ===
=== File: players' ===
=== File: hands..." ===
=== File: self.players[0].hand.insert(0, ===
=== File: self.trick.cards[0]) ===
=== File: self.players[0].hand.insert(0, ===
=== File: self.trick.cards[1]) ===
=== File: self.players[1].hand.insert(0, ===
=== File: self.trick.cards[2]) ===
=== File: self.players[1].hand.insert(0, ===
=== File: self.trick.cards[3]) ===
=== File: self.trick ===
=== File: = ===
=== File: Trick() ===
=== File: def ===
=== File: buzz_in(self, ===
=== File: player_num): ===
=== File: self.buzzed_in ===
=== File: = ===
=== File: player_num ===
=== File: # ===
=== File: Test ===
=== File: for ===
=== File: syntactical ===
=== File: correctness. ===
=== File: # ===
=== File: FIXME: ===
=== File: Some ===
=== File: valid ===
=== File: formulae ===
=== File: are ===
=== File: throwing ===
=== File: false ===
=== File: negatives. ===
=== File: def ===
=== File: is_valid_guess(self, ===
=== File: guess): ===
=== File: is_valid ===
=== File: = ===
=== File: True ===
=== File: try: ===
=== File: ast ===
=== File: = ===
=== File: compiler.parse(guess) ===
=== File: except ===
=== File: SyntaxError: ===
=== File: is_valid ===
=== File: = ===
=== File: False ===
=== File: return ===
=== File: is_valid ===
=== File: # ===
=== File: Test ===
=== File: for ===
=== File: legal ===
=== File: usage ===
=== File: of ===
=== File: cards. ===
=== File: # ===
=== File: Fails ===
=== File: if ===
=== File: guess ===
=== File: does ===
=== File: not ===
=== File: use ===
=== File: each ===
=== File: number ===
=== File: in ===
=== File: the ===
=== File: trick ===
=== File: exactly ===
=== File: once. ===
=== File: # ===
=== File: Fails ===
=== File: if ===
=== File: guess ===
=== File: uses ===
=== File: an ===
=== File: illegal ===
=== File: operator ===
=== File: (legal ===
=== File: operators ===
=== File: are ===
=== File: +, ===
=== File: -, ===
=== File: *, ===
=== File: /, ===
=== File: (, ===
=== File: and ===
=== File: ). ===
=== File: def ===
=== File: is_legal_guess(self, ===
=== File: guess): ===
=== File: guess_numbers ===
=== File: = ===
=== File: [] ===
=== File: trick_numbers ===
=== File: = ===
=== File: map(lambda ===
=== File: card: ===
=== File: str(card.value), ===
=== File: self.trick.cards) ===
=== File: valid_operators ===
=== File: = ===
=== File: ['+', ===
=== File: '-', ===
=== File: '*', ===
=== File: '/', ===
=== File: '(', ===
=== File: ')'] ===
=== File: for ===
=== File: c ===
=== File: in ===
=== File: guess: ===
=== File: if ===
=== File: c.isdigit(): ===
=== File: # ===
=== File: print ===
=== File: "Adding ===
=== File: {} ===
=== File: to ===
=== File: list ===
=== File: of ===
=== File: numbers.".format(c) ===
=== File: guess_numbers.append(c) ===
=== File: elif ===
=== File: c ===
=== File: in ===
=== File: valid_operators: ===
=== File: # ===
=== File: print ===
=== File: "Skipping ===
=== File: over ===
=== File: operator ===
=== File: {}.".format(c) ===
=== File: continue ===
=== File: elif ===
=== File: c.isspace(): ===
=== File: # ===
=== File: print ===
=== File: "Skipping ===
=== File: over ===
=== File: a ===
=== File: space." ===
=== File: continue ===
=== File: else: ===
=== File: # ===
=== File: print ===
=== File: "Found ===
=== File: invalid ===
=== File: character ===
=== File: {}!".format(c) ===
=== File: return ===
=== File: False ===
=== File: if ===
=== File: sorted(guess_numbers) ===
=== File: != ===
=== File: sorted(trick_numbers): ===
=== File: # ===
=== File: print ===
=== File: "Mismatched ===
=== File: numbers!" ===
=== File: return ===
=== File: False ===
=== File: return ===
=== File: True ===
=== File: def ===
=== File: is_correct_guess(self, ===
=== File: guess): ===
=== File: return ===
=== File: eval(guess) ===
=== File: == ===
=== File: 24 ===
=== File: # ===
=== File: FIXME: ===
=== File: eliminate ===
=== File: integer ===
=== File: division ===
=== File: from ===
=== File: solutions. ===
=== File: def ===
=== File: find_solution(self): ===
=== File: for ===
=== File: c ===
=== File: in ===
=== File: itertools.permutations(self.trick.cards): ===
=== File: for ===
=== File: o ===
=== File: in ===
=== File: itertools.permutations(["+", ===
=== File: "-", ===
=== File: "*", ===
=== File: "/"]): ===
=== File: guess ===
=== File: = ===
=== File: str(c[0].value) ===
=== File: for ===
=== File: i ===
=== File: in ===
=== File: range(3): ===
=== File: guess ===
=== File: += ===
=== File: o[i] ===
=== File: + ===
=== File: str(c[i+1].value) ===
=== File: if ===
=== File: eval(guess) ===
=== File: == ===
=== File: 24: ===
=== File: return ===
=== File: guess ===
=== File: return ===
=== File: False ===
=== File: def ===
=== File: solve(self, ===
=== File: player_num): ===
=== File: self.players[player_num].hand.extend(self.trick.cards) ===
=== File: self.trick.cards ===
=== File: = ===
=== File: [] ===
=== File: self.players[player_num].points ===
=== File: += ===
=== File: 1 ===
=== File: def ===
=== File: winner(self): ===
=== File: if ===
=== File: len(self.players[0].hand) ===
=== File: == ===
=== File: 40 ===
=== File: or ===
=== File: self.players[0].points ===
=== File: == ===
=== File: 15: ===
=== File: return ===
=== File: 0 ===
=== File: if ===
=== File: len(self.players[1].hand) ===
=== File: == ===
=== File: 40 ===
=== File: or ===
=== File: self.players[1].points ===
=== File: == ===
=== File: 15: ===
=== File: return ===
=== File: 1 ===
=== File: return ===
=== File: False ===
=== File: if ===
=== File: __name__ ===
=== File: == ===
=== File: '__main__': ===
=== File: TwentyFourTable().play_game() ===
=== File: from ===
=== File: DeckObjects ===
=== File: import ===
=== File: Deck ===
=== File: class ===
=== File: DiscardPile(Deck): ===
=== File: def ===
=== File: __init__(self): ===
=== File: self.cards ===
=== File: = ===
=== File: [] ===
=== File: def ===
=== File: add(self, ===
=== File: card): ===
=== File: self.cards.append(card) ===
=== File: def ===
=== File: peek(self): ===
=== File: if ===
=== File: len(self.cards) ===
=== File: > ===
=== File: 0: ===
=== File: return ===
=== File: self.cards[-1] ===
=== File: def ===
=== File: has_double(self): ===
=== File: if ===
=== File: len(self.cards) ===
=== File: > ===
=== File: 1: ===
=== File: return ===
=== File: not ===
=== File: (self.cards[-1] ===
=== File: < ===
=== File: self.cards[-2]) ===
=== File: and ===
=== File: \ ===
=== File: not ===
=== File: (self.cards[-2] ===
=== File: < ===
=== File: self.cards[-1]) ===
=== File: else: ===
=== File: return ===
=== File: False ===
=== File: def ===
=== File: has_sandwich(self): ===
=== File: if ===
=== File: len(self.cards) ===
=== File: > ===
=== File: 2: ===
=== File: return ===
=== File: not ===
=== File: (self.cards[-1] ===
=== File: < ===
=== File: self.cards[-3]) ===
=== File: and ===
=== File: \ ===
=== File: not ===
=== File: (self.cards[-3] ===
=== File: < ===
=== File: self.cards[-1]) ===
=== File: else: ===
=== File: return ===
=== File: False ===
=== File: import ===
=== File: random ===
=== File: from ===
=== File: CardObjects ===
=== File: import ===
=== File: Card ===
=== File: from ===
=== File: DeckObjects ===
=== File: import ===
=== File: Deck ===
=== File: class ===
=== File: TwentyFourDeck(Deck): ===
=== File: def ===
=== File: __init__(self): ===
=== File: self.cards ===
=== File: = ===
=== File: [] ===
=== File: suits ===
=== File: = ===
=== File: ["Clubs", ===
=== File: "Diamonds", ===
=== File: "Hearts", ===
=== File: "Spades"] ===
=== File: for ===
=== File: value ===
=== File: in ===
=== File: range(1, ===
=== File: 11): ===
=== File: for ===
=== File: suit ===
=== File: in ===
=== File: suits: ===
=== File: self.cards.append(Card(value, ===
=== File: suit)) ===
=== File: from ===
=== File: TableObjects ===
=== File: import ===
=== File: Table ===
=== File: from ===
=== File: GoFishHumanPlayerObjects ===
=== File: import ===
=== File: GoFishHumanPlayer ===
=== File: from ===
=== File: GoFishAIPlayerObjects ===
=== File: import ===
=== File: GoFishAIPlayer ===
=== File: from ===
=== File: DeckObjects ===
=== File: import ===
=== File: Deck ===
=== File: class ===
=== File: GoFishTable(Table): ===
=== File: def ===
=== File: __init__(self, ===
=== File: player_count=2): ===
=== File: self.players ===
=== File: = ===
=== File: [] ===
=== File: self.deck ===
=== File: = ===
=== File: Deck() ===
=== File: self.deck.shuffle() ===
=== File: self.players.append(GoFishHumanPlayer('Puny ===
=== File: Human')) ===
=== File: for ===
=== File: i ===
=== File: in ===
=== File: range(player_count ===
=== File: - ===
=== File: 1): ===
=== File: self.players.append(GoFishAIPlayer('AI%s' ===
=== File: % ===
=== File: (i ===
=== File: + ===
=== File: 1))) ===
=== File: self.deal(7) ===
=== File: #interacting ===
=== File: with ===
=== File: GUI ===
=== File: self.current_player ===
=== File: = ===
=== File: 0 ===
=== File: self.other_player ===
=== File: = ===
=== File: None ===
=== File: def ===
=== File: get_winner(self): ===
=== File: max_score_player ===
=== File: = ===
=== File: -1 ===
=== File: for ===
=== File: i ===
=== File: in ===
=== File: range(len(self.players)): ===
=== File: if ===
=== File: max_score_player ===
=== File: == ===
=== File: -1 ===
=== File: or ===
=== File: self.players[i].score ===
=== File: > ===
=== File: self.players[max_score_player].score: ===
=== File: max_score_player ===
=== File: = ===
=== File: i ===
=== File: return ===
=== File: max_score_player ===
=== File: def ===
=== File: play_turn(self, ===
=== File: card_value=None): ===
=== File: ret ===
=== File: = ===
=== File: '' ===
=== File: others ===
=== File: = ===
=== File: self.players[0:self.current_player] ===
=== File: + ===
=== File: self.players[self.current_player+1:] ===
=== File: print ===
=== File: "Player ===
=== File: %s:" ===
=== File: % ===
=== File: self.current_player ===
=== File: if ===
=== File: self.players[self.current_player].player_type() ===
=== File: == ===
=== File: 1: ===
=== File: #is ===
=== File: AI ===
=== File: ret ===
=== File: = ===
=== File: self.players[self.current_player].play_round(others, ===
=== File: self.deck) ===
=== File: else: ===
=== File: #is ===
=== File: Human ===
=== File: ret ===
=== File: = ===
=== File: self.players[self.current_player].play_round(card_value, ===
=== File: self.players, ===
=== File: self.other_player, ===
=== File: self.deck) ===
=== File: self.players[self.current_player].update_score() ===
=== File: self.current_player ===
=== File: = ===
=== File: (self.current_player ===
=== File: + ===
=== File: 1) ===
=== File: % ===
=== File: (len(self.players)) ===
=== File: return ===
=== File: ret ===
=== File: def ===
=== File: winner(self): ===
=== File: for ===
=== File: player ===
=== File: in ===
=== File: self.players: ===
=== File: if ===
=== File: len(player.hand) ===
=== File: == ===
=== File: 0: ===
=== File: return ===
=== File: True ===
=== File: return ===
=== File: False ===
=== File: import ===
=== File: unittest ===
=== File: from ===
=== File: UnoAIPlayerTests ===
=== File: import ===
=== File: * ===
=== File: from ===
=== File: UnoCardTests ===
=== File: import ===
=== File: * ===
=== File: from ===
=== File: UnoDeckTests ===
=== File: import ===
=== File: * ===
=== File: from ===
=== File: UnoHumanPlayerTests ===
=== File: import ===
=== File: * ===
=== File: from ===
=== File: UnoPlayerTests ===
=== File: import ===
=== File: * ===
=== File: from ===
=== File: UnoTableTests ===
=== File: import ===
=== File: * ===
=== File: load ===
=== File: = ===
=== File: unittest.TestLoader().loadTestsFromTestCase ===
=== File: suites ===
=== File: = ===
=== File: map(load, ===
=== File: [TestUnoAIPlayer, ===
=== File: TestUnoCard, ===
=== File: TestUnoDeck, ===
=== File: TestUnoHumanPlayer, ===
=== File: TestUnoPlayer, ===
=== File: TestUnoTable]) ===
=== File: alltests ===
=== File: = ===
=== File: unittest.TestSuite(suites) ===
=== File: unittest.TextTestRunner(verbosity=1).run(alltests) ===
=== File: from ===
=== File: CardObjects ===
=== File: import ===
=== File: Card ===
=== File: class ===
=== File: UnoCard(Card): ===
=== File: def ===
=== File: __init__(self, ===
=== File: value=None, ===
=== File: type=None, ===
=== File: color=None): ===
=== File: if ===
=== File: value ===
=== File: == ===
=== File: None ===
=== File: or ===
=== File: type ===
=== File: == ===
=== File: None ===
=== File: or ===
=== File: color ===
=== File: == ===
=== File: None ===
=== File: \ ===
=== File: or ===
=== File: color ===
=== File: not ===
=== File: in ===
=== File: ['Black', ===
=== File: 'Red', ===
=== File: 'Blue', ===
=== File: 'Green', ===
=== File: 'Yellow'] ===
=== File: \ ===
=== File: or ===
=== File: type ===
=== File: not ===
=== File: in ===
=== File: ['Number', ===
=== File: 'Skip', ===
=== File: 'Reverse', ===
=== File: 'Draw ===
=== File: Two', ===
=== File: 'Wild']: ===
=== File: raise ===
=== File: ValueError ===
=== File: else: ===
=== File: self.value ===
=== File: = ===
=== File: value ===
=== File: self.type ===
=== File: = ===
=== File: type ===
=== File: self.color ===
=== File: = ===
=== File: color ===
=== File: def ===
=== File: __str__(self): ===
=== File: if ===
=== File: self.type ===
=== File: is ===
=== File: 'Number': ===
=== File: return ===
=== File: '%s ===
=== File: %s' ===
=== File: % ===
=== File: (self.color, ===
=== File: self.value) ===
=== File: elif ===
=== File: self.type ===
=== File: is ===
=== File: 'Wild': ===
=== File: if ===
=== File: self.color ===
=== File: != ===
=== File: 'Black': ===
=== File: return ===
=== File: '%s ===
=== File: Wild' ===
=== File: % ===
=== File: self.color ===
=== File: else: ===
=== File: return ===
=== File: 'Wild ===
=== File: Card' ===
=== File: else: ===
=== File: return ===
=== File: '%s ===
=== File: %s' ===
=== File: % ===
=== File: (self.color, ===
=== File: self.type) ===
=== File: __repr__ ===
=== File: = ===
=== File: __str__ ===
=== File: def ===
=== File: set_color_of_wild(self, ===
=== File: color): ===
=== File: if ===
=== File: color ===
=== File: in ===
=== File: ['Red', ===
=== File: 'Blue', ===
=== File: 'Green', ===
=== File: 'Yellow'] ===
=== File: and ===
=== File: self.type ===
=== File: == ===
=== File: 'Wild': ===
=== File: self.color ===
=== File: = ===
=== File: color ===
=== File: else: ===
=== File: raise ===
=== File: ValueError ===
=== File: from ===
=== File: GoFishPlayerObjects ===
=== File: import ===
=== File: GoFishPlayer ===
=== File: from ===
=== File: random ===
=== File: import ===
=== File: randrange ===
=== File: class ===
=== File: GoFishAIPlayer(GoFishPlayer): ===
=== File: def ===
=== File: player_type(self): ===
=== File: return ===
=== File: 1 ===
=== File: def ===
=== File: draw_from(self, ===
=== File: deck): ===
=== File: try: ===
=== File: self.hand.insert(0, ===
=== File: deck.draw()) ===
=== File: except: ===
=== File: pass ===
=== File: def ===
=== File: take_card(self, ===
=== File: other, ===
=== File: index): ===
=== File: ret ===
=== File: = ===
=== File: "%s ===
=== File: takes ===
=== File: the ===
=== File: %s ===
=== File: from ===
=== File: %s! ===
=== File: The ===
=== File: turn ===
=== File: is ===
=== File: over." ===
=== File: % ===
=== File: (self, ===
=== File: other.hand[index], ===
=== File: str(other)) ===
=== File: print ===
=== File: ret ===
=== File: self.hand ===
=== File: = ===
=== File: self.hand ===
=== File: + ===
=== File: [other.hand[index]] ===
=== File: other.hand ===
=== File: = ===
=== File: other.hand[0:index] ===
=== File: + ===
=== File: other.hand[index+1:] ===
=== File: return ===
=== File: ret ===
=== File: def ===
=== File: get_best_value(self): ===
=== File: card_values ===
=== File: = ===
=== File: [0 ===
=== File: for ===
=== File: i ===
=== File: in ===
=== File: range(13)] ===
=== File: for ===
=== File: card ===
=== File: in ===
=== File: self.hand: ===
=== File: card_values[card.value ===
=== File: - ===
=== File: 1] ===
=== File: = ===
=== File: card_values[card.value ===
=== File: - ===
=== File: 1] ===
=== File: + ===
=== File: 1 ===
=== File: try: ===
=== File: return ===
=== File: card_values.index(max(card_values)) ===
=== File: + ===
=== File: 1 ===
=== File: except: ===
=== File: return ===
=== File: -1 ===
=== File: def ===
=== File: play_round(self, ===
=== File: others, ===
=== File: deck): ===
=== File: player ===
=== File: = ===
=== File: randrange(len(others)) ===
=== File: value ===
=== File: = ===
=== File: self.get_best_value() ===
=== File: index ===
=== File: = ===
=== File: others[player].has_card_index(value) ===
=== File: if ===
=== File: index ===
=== File: > ===
=== File: -1: ===
=== File: return ===
=== File: self.take_card(others[player], ===
=== File: index) ===
=== File: else: ===
=== File: self.draw_from(deck) ===
=== File: ret ===
=== File: = ===
=== File: "%s ===
=== File: asks ===
=== File: if ===
=== File: %s ===
=== File: has ===
=== File: any ===
=== File: %s's, ===
=== File: but ===
=== File: must ===
=== File: fish... ===
=== File: Their ===
=== File: turn ===
=== File: is ===
=== File: over." ===
=== File: % ===
=== File: (self, ===
=== File: str(others[player]), ===
=== File: value) ===
=== File: print ===
=== File: ret ===
=== File: return ===
=== File: ret ===
=== File: class ===
=== File: Card(object): ===
=== File: def ===
=== File: __init__(self, ===
=== File: value=None, ===
=== File: suit=None, ===
=== File: name=None): ===
=== File: if ===
=== File: value ===
=== File: == ===
=== File: None ===
=== File: or ===
=== File: suit ===
=== File: == ===
=== File: None ===
=== File: or ===
=== File: suit ===
=== File: == ===
=== File: "": ===
=== File: raise ===
=== File: ValueError ===
=== File: else: ===
=== File: self.value ===
=== File: = ===
=== File: value ===
=== File: self.suit ===
=== File: = ===
=== File: suit ===
=== File: if ===
=== File: name ===
=== File: != ===
=== File: None: ===
=== File: self.name ===
=== File: = ===
=== File: name ===
=== File: else: ===
=== File: self.name ===
=== File: = ===
=== File: self.get_name() ===
=== File: def ===
=== File: __str__(self): ===
=== File: if ===
=== File: self.value ===
=== File: != ===
=== File: 0: ===
=== File: return ===
=== File: "%s ===
=== File: of ===
=== File: %s" ===
=== File: % ===
=== File: (self.name, ===
=== File: self.suit) ===
=== File: else: ===
=== File: return ===
=== File: self.name ===
=== File: __repr__ ===
=== File: = ===
=== File: __str__ ===
=== File: def ===
=== File: get_name(self): ===
=== File: if ===
=== File: 1 ===
=== File: < ===
=== File: self.value ===
=== File: <= ===
=== File: 10: ===
=== File: return ===
=== File: str(self.value) ===
=== File: elif ===
=== File: self.value ===
=== File: == ===
=== File: 1: ===
=== File: return ===
=== File: "Ace" ===
=== File: elif ===
=== File: self.value ===
=== File: == ===
=== File: 11: ===
=== File: return ===
=== File: "Jack" ===
=== File: elif ===
=== File: self.value ===
=== File: == ===
=== File: 12: ===
=== File: return ===
=== File: "Queen" ===
=== File: elif ===
=== File: self.value ===
=== File: == ===
=== File: 13: ===
=== File: return ===
=== File: "King" ===
=== File: elif ===
=== File: self.value ===
=== File: == ===
=== File: 0: ===
=== File: return ===
=== File: "Joker" ===
=== File: else: ===
=== File: raise ===
=== File: ValueError ===
=== File: def ===
=== File: same_as(self, ===
=== File: other): ===
=== File: return ===
=== File: self.value ===
=== File: == ===
=== File: other.value ===
=== File: and ===
=== File: self.suit ===
=== File: == ===
=== File: other.suit ===
=== File: def ===
=== File: __lt__(self, ===
=== File: other): ===
=== File: if ===
=== File: self.value ===
=== File: < ===
=== File: other.value: ===
=== File: return ===
=== File: 1 ===
=== File: else: ===
=== File: return ===
=== File: 0 ===
=== File: from ===
=== File: UnoPlayerObjects ===
=== File: import ===
=== File: UnoPlayer ===
=== File: class ===
=== File: HumanUnoPlayer(UnoPlayer): ===
=== File: def ===
=== File: player_type(self): ===
=== File: return ===
=== File: 0 ===
=== File: def ===
=== File: card_index_in_hand(self, ===
=== File: card_str): ===
=== File: for ===
=== File: i, ===
=== File: c ===
=== File: in ===
=== File: enumerate(self.hand): ===
=== File: if ===
=== File: card_str ===
=== File: == ===
=== File: str(c): ===
=== File: return ===
=== File: i ===
=== File: return ===
=== File: -1 ===
=== File: def ===
=== File: play_card(self, ===
=== File: card_str, ===
=== File: pile): ===
=== File: ret ===
=== File: = ===
=== File: False ===
=== File: index ===
=== File: = ===
=== File: self.card_index_in_hand(card_str) ===
=== File: if ===
=== File: index ===
=== File: == ===
=== File: -1: ===
=== File: pass ===
=== File: #print ===
=== File: 'That ===
=== File: card ===
=== File: is ===
=== File: not ===
=== File: in ===
=== File: your ===
=== File: hand!' ===
=== File: elif ===
=== File: self.is_valid_move(self.hand[index], ===
=== File: pile.peek()): ===
=== File: pile.add(self.hand[index]) ===
=== File: self.hand ===
=== File: = ===
=== File: self.hand[:index] ===
=== File: + ===
=== File: self.hand[index ===
=== File: + ===
=== File: 1:] ===
=== File: ret ===
=== File: = ===
=== File: True ===
=== File: else: ===
=== File: pass ===
=== File: #print ===
=== File: 'That ===
=== File: is ===
=== File: not ===
=== File: a ===
=== File: valid ===
=== File: move!' ===
=== File: return ===
=== File: ret ===
=== File: from ===
=== File: PlayerObjects ===
=== File: import ===
=== File: Player ===
=== File: from ===
=== File: CardObjects ===
=== File: import ===
=== File: Card ===
=== File: class ===
=== File: TwentyFourPlayer(Player): ===
=== File: def ===
=== File: __init__(self): ===
=== File: self.hand ===
=== File: = ===
=== File: [] ===
=== File: self.points ===
=== File: = ===
=== File: 0 ===
=== File: from ===
=== File: pygamehelper ===
=== File: import ===
=== File: * ===
=== File: from ===
=== File: pygame ===
=== File: import ===
=== File: * ===
=== File: from ===
=== File: pygame.locals ===
=== File: import ===
=== File: * ===
=== File: from ===
=== File: CardObjects ===
=== File: import ===
=== File: Card ===
=== File: from ===
=== File: DeckObjects ===
=== File: import ===
=== File: Deck ===
=== File: from ===
=== File: PlayerObjects ===
=== File: import ===
=== File: Player ===
=== File: from ===
=== File: TableObjects ===
=== File: import ===
=== File: Table ===
=== File: class ===
=== File: DrawDemo(PygameHelper): ===
=== File: def ===
=== File: __init__(self): ===
=== File: #constants: ===
=== File: sizes, ===
=== File: colors, ===
=== File: etc. ===
=== File: self.w ===
=== File: = ===
=== File: 1200 ===
=== File: self.h ===
=== File: = ===
=== File: 800 ===
=== File: self.card_w ===
=== File: = ===
=== File: 72 ===
=== File: self.card_h ===
=== File: = ===
=== File: 96 ===
=== File: self.draw_x ===
=== File: = ===
=== File: 500 ===
=== File: self.draw_y ===
=== File: = ===
=== File: 300 ===
=== File: self.discard_x ===
=== File: = ===
=== File: 650 ===
=== File: self.discard_y ===
=== File: = ===
=== File: 300 ===
=== File: self.hand_area_x ===
=== File: = ===
=== File: 0 ===
=== File: self.hand_area_y ===
=== File: = ===
=== File: 640 ===
=== File: self.color_background ===
=== File: = ===
=== File: (51, ===
=== File: 204, ===
=== File: 66) ===
=== File: self.color_draw ===
=== File: = ===
=== File: (0, ===
=== File: 0, ===
=== File: 255) ===
=== File: self.color_discard ===
=== File: = ===
=== File: (255, ===
=== File: 0, ===
=== File: 0) ===
=== File: #general ===
=== File: set ===
=== File: up ===
=== File: PygameHelper.__init__(self, ===
=== File: size=(self.w, ===
=== File: self.h), ===
=== File: fill=((255, ===
=== File: 255, ===
=== File: 255)), ===
=== File: title='Go ===
=== File: Fish') ===
=== File: pygame.draw.rect(self.screen, ===
=== File: self.color_background, ===
=== File: (0, ===
=== File: 0, ===
=== File: self.w, ===
=== File: self.h)) ===
=== File: self.label_font ===
=== File: = ===
=== File: pygame.font.Font(None, ===
=== File: 16) ===
=== File: self.message_font ===
=== File: = ===
=== File: pygame.font.Font(None, ===
=== File: 20) ===
=== File: #load ===
=== File: card ===
=== File: images ===
=== File: self.clubs ===
=== File: = ===
=== File: [] ===
=== File: self.diamonds ===
=== File: = ===
=== File: [] ===
=== File: self.hearts ===
=== File: = ===
=== File: [] ===
=== File: self.spades ===
=== File: = ===
=== File: [] ===
=== File: for ===
=== File: i ===
=== File: in ===
=== File: range(1, ===
=== File: 14): ===
=== File: self.clubs.append(pygame.image.load('images/C%s.png' ===
=== File: % ===
=== File: i)) ===
=== File: self.diamonds.append(pygame.image.load('images/D%s.png' ===
=== File: % ===
=== File: i)) ===
=== File: self.hearts.append(pygame.image.load('images/H%s.png' ===
=== File: % ===
=== File: i)) ===
=== File: self.spades.append(pygame.image.load('images/S%s.png' ===
=== File: % ===
=== File: i)) ===
=== File: self.jokers ===
=== File: = ===
=== File: [pygame.image.load('images/Z0.png'), ===
=== File: pygame.image.load('images/Z1.png')] ===
=== File: #set ===
=== File: up ===
=== File: cards, ===
=== File: etc. ===
=== File: self.table ===
=== File: = ===
=== File: Table(1) ===
=== File: #set ===
=== File: up ===
=== File: 'playing ===
=== File: area' ===
=== File: self.draw_deck() ===
=== File: self.draw_discard() ===
=== File: self.draw_hand_area() ===
=== File: self.hand_locs ===
=== File: = ===
=== File: [] ===
=== File: #Screen ===
=== File: drawing ===
=== File: methods ===
=== File: def ===
=== File: draw_deck_label(self): ===
=== File: self.screen.blit(self.label_font.render('Deck: ===
=== File: %r' ===
=== File: % ===
=== File: len(self.table.deck.cards), ===
=== File: 1, ===
=== File: (0, ===
=== File: 0, ===
=== File: 0)), ===
=== File: (self.w ===
=== File: / ===
=== File: 2 ===
=== File: - ===
=== File: 100, ===
=== File: self.h ===
=== File: / ===
=== File: 2 ===
=== File: + ===
=== File: 1)) ===
=== File: def ===
=== File: draw_discard_label(self): ===
=== File: self.screen.blit(self.label_font.render('Discard ===
=== File: Pile: ===
=== File: %r' ===
=== File: % ===
=== File: len(self.table.discard.cards), ===
=== File: 1, ===
=== File: (0, ===
=== File: 0, ===
=== File: 0)), ===
=== File: (self.w ===
=== File: / ===
=== File: 2 ===
=== File: + ===
=== File: 50, ===
=== File: self.h ===
=== File: / ===
=== File: 2 ===
=== File: + ===
=== File: 1)) ===
=== File: def ===
=== File: draw_card(self, ===
=== File: x, ===
=== File: y, ===
=== File: card): ===
=== File: if ===
=== File: card.suit ===
=== File: == ===
=== File: 'Clubs': ===
=== File: self.screen.blit(self.clubs[card.value ===
=== File: - ===
=== File: 1], ===
=== File: (x, ===
=== File: y)) ===
=== File: elif ===
=== File: card.suit ===
=== File: == ===
=== File: 'Diamonds': ===
=== File: self.screen.blit(self.diamonds[card.value ===
=== File: - ===
=== File: 1], ===
=== File: (x, ===
=== File: y)) ===
=== File: elif ===
=== File: card.suit ===
=== File: == ===
=== File: 'Hearts': ===
=== File: self.screen.blit(self.hearts[card.value ===
=== File: - ===
=== File: 1], ===
=== File: (x, ===
=== File: y)) ===
=== File: elif ===
=== File: card.suit ===
=== File: == ===
=== File: 'Spades': ===
=== File: self.screen.blit(self.spades[card.value ===
=== File: - ===
=== File: 1], ===
=== File: (x, ===
=== File: y)) ===
=== File: else: ===
=== File: self.screen.blit(self.jokers[0], ===
=== File: (x, ===
=== File: y)) ===
=== File: pygame.draw.rect(self.screen, ===
=== File: self.color_background, ===
=== File: (self.w ===
=== File: / ===
=== File: 2 ===
=== File: - ===
=== File: 100, ===
=== File: self.h ===
=== File: / ===
=== File: 2 ===
=== File: + ===
=== File: 1, ===
=== File: 50, ===
=== File: 10)) ===
=== File: self.draw_deck_label() ===
=== File: def ===
=== File: draw_deck(self): ===
=== File: pygame.draw.rect(self.screen, ===
=== File: self.color_draw ===
=== File: , ===
=== File: (self.draw_x, ===
=== File: self.draw_y, ===
=== File: self.card_w, ===
=== File: self.card_h)) ===
=== File: self.draw_deck_label() ===
=== File: def ===
=== File: draw_discard(self, ===
=== File: card=None): ===
=== File: pygame.draw.rect(self.screen, ===
=== File: self.color_discard, ===
=== File: (self.discard_x, ===
=== File: self.discard_y, ===
=== File: self.card_w, ===
=== File: self.card_h)) ===
=== File: pygame.draw.rect(self.screen, ===
=== File: self.color_background, ===
=== File: (self.w ===
=== File: / ===
=== File: 2 ===
=== File: + ===
=== File: 50, ===
=== File: self.h ===
=== File: / ===
=== File: 2 ===
=== File: + ===
=== File: 1, ===
=== File: 85, ===
=== File: 10)) ===
=== File: self.draw_discard_label() ===
=== File: if ===
=== File: card: ===
=== File: self.draw_card(self.discard_x, ===
=== File: self.discard_y, ===
=== File: card) ===
=== File: def ===
=== File: draw_hand(self): ===
=== File: self.hand_locs ===
=== File: = ===
=== File: [] ===
=== File: self.draw_hand_area() ===
=== File: for ===
=== File: i, ===
=== File: c ===
=== File: in ===
=== File: enumerate(self.table.players[0].hand): ===
=== File: self.draw_card(i ===
=== File: + ===
=== File: i ===
=== File: * ===
=== File: 100, ===
=== File: self.hand_area_y, ===
=== File: c) ===
=== File: self.hand_locs.append((i ===
=== File: + ===
=== File: i ===
=== File: * ===
=== File: 100, ===
=== File: self.hand_area_y)) ===
=== File: def ===
=== File: draw_hand_area(self): ===
=== File: pygame.draw.rect(self.screen, ===
=== File: self.color_background, ===
=== File: (self.hand_area_x, ===
=== File: self.hand_area_y, ===
=== File: self.w, ===
=== File: self.hand_area_y)) ===
=== File: pygame.draw.line(self.screen, ===
=== File: (0,0,0), ===
=== File: (self.hand_area_x, ===
=== File: self.hand_area_y), ===
=== File: (self.w, ===
=== File: self.hand_area_y)) ===
=== File: #click ===
=== File: checking ===
=== File: def ===
=== File: click_is_in(self, ===
=== File: xr, ===
=== File: yr, ===
=== File: pos): ===
=== File: return ===
=== File: pos[0] ===
=== File: >= ===
=== File: xr[0] ===
=== File: and ===
=== File: pos[0] ===
=== File: <= ===
=== File: xr[1] ===
=== File: and ===
=== File: pos[1] ===
=== File: >= ===
=== File: yr[0] ===
=== File: and ===
=== File: pos[1] ===
=== File: <= ===
=== File: yr[1] ===
=== File: def ===
=== File: check_draw_click(self): ===
=== File: if ===
=== File: len(self.table.deck.cards) ===
=== File: == ===
=== File: 0: ===
=== File: self.screen.blit(self.message_font.render('No ===
=== File: more ===
=== File: cards ===
=== File: to ===
=== File: draw!', ===
=== File: 1, ===
=== File: (0, ===
=== File: 0, ===
=== File: 0)), ===
=== File: (400, ===
=== File: 750)) ===
=== File: elif ===
=== File: len(self.table.players[0].hand) ===
=== File: < ===
=== File: 7: ===
=== File: self.table.players[0].draw_from(self.table.deck) ===
=== File: self.draw_hand() ===
=== File: else: ===
=== File: self.screen.blit(self.message_font.render('You ===
=== File: cannot ===
=== File: have ===
=== File: more ===
=== File: than ===
=== File: 7 ===
=== File: cards ===
=== File: in ===
=== File: your ===
=== File: hand', ===
=== File: 1, ===
=== File: (0, ===
=== File: 0, ===
=== File: 0)), ===
=== File: (400, ===
=== File: 750)) ===
=== File: def ===
=== File: check_discard_click(self, ===
=== File: pos): ===
=== File: temp ===
=== File: = ===
=== File: None ===
=== File: for ===
=== File: i, ===
=== File: loc ===
=== File: in ===
=== File: enumerate(self.hand_locs): ===
=== File: if ===
=== File: self.click_is_in((loc[0], ===
=== File: loc[0] ===
=== File: + ===
=== File: self.card_w), ===
=== File: (loc[1], ===
=== File: loc[1] ===
=== File: + ===
=== File: self.card_w), ===
=== File: pos): ===
=== File: temp ===
=== File: = ===
=== File: self.table.players[0].hand[i] ===
=== File: self.table.players[0].hand.remove(temp) ===
=== File: self.table.discard.add(temp) ===
=== File: if ===
=== File: temp: ===
=== File: self.draw_hand() ===
=== File: self.draw_discard(temp) ===
=== File: #general ===
=== File: pygame ===
=== File: stuff ===
=== File: def ===
=== File: mouseUp(self, ===
=== File: button, ===
=== File: pos): ===
=== File: if ===
=== File: button ===
=== File: == ===
=== File: 1: ===
=== File: if ===
=== File: self.click_is_in((self.draw_x, ===
=== File: self.draw_x ===
=== File: + ===
=== File: self.card_w), ===
=== File: (self.draw_y, ===
=== File: self.draw_y ===
=== File: + ===
=== File: self.card_h), ===
=== File: pos): ===
=== File: self.check_draw_click() ===
=== File: elif ===
=== File: pos[1] ===
=== File: >= ===
=== File: self.hand_area_y ===
=== File: and ===
=== File: len(self.table.players[0].hand) ===
=== File: > ===
=== File: 0: ===
=== File: self.check_discard_click(pos) ===
=== File: def ===
=== File: update(self): ===
=== File: pass ===
=== File: def ===
=== File: keyUp(self, ===
=== File: key): ===
=== File: pass ===
=== File: def ===
=== File: mouseMotion(self, ===
=== File: buttons, ===
=== File: pos, ===
=== File: rel): ===
=== File: pass ===
=== File: def ===
=== File: draw(self): ===
=== File: pass ===
=== File: s ===
=== File: = ===
=== File: DrawDemo() ===
=== File: s.mainLoop(40) ===
=== File: from ===
=== File: GoFishPlayerObjects ===
=== File: import ===
=== File: GoFishPlayer ===
=== File: class ===
=== File: GoFishHumanPlayer(GoFishPlayer): ===
=== File: def ===
=== File: player_type(self): ===
=== File: return ===
=== File: 0 ===
=== File: def ===
=== File: print_hand(self): ===
=== File: print ===
=== File: "Your ===
=== File: hand ===
=== File: contains: ===
=== File: %s" ===
=== File: % ===
=== File: self.hand ===
=== File: def ===
=== File: take_card(self, ===
=== File: other, ===
=== File: index): ===
=== File: ret ===
=== File: = ===
=== File: "You ===
=== File: take ===
=== File: the ===
=== File: %s!" ===
=== File: % ===
=== File: other.hand[index] ===
=== File: self.hand ===
=== File: = ===
=== File: self.hand ===
=== File: + ===
=== File: [other.hand[index]] ===
=== File: other.hand ===
=== File: = ===
=== File: other.hand[0:index] ===
=== File: + ===
=== File: other.hand[index+1:] ===
=== File: print ===
=== File: ret ===
=== File: return ===
=== File: ret ===
=== File: def ===
=== File: draw_from(self, ===
=== File: deck): ===
=== File: try: ===
=== File: self.hand.insert(0, ===
=== File: deck.draw()) ===
=== File: ret ===
=== File: = ===
=== File: "You ===
=== File: got ===
=== File: the ===
=== File: %s" ===
=== File: % ===
=== File: self.hand[0] ===
=== File: return ===
=== File: ret ===
=== File: except: ===
=== File: ret ===
=== File: = ===
=== File: "The ===
=== File: deck ===
=== File: is ===
=== File: empty!" ===
=== File: print ===
=== File: ret ===
=== File: return ===
=== File: ret ===
=== File: def ===
=== File: play_round(self, ===
=== File: card_value, ===
=== File: others, ===
=== File: player_id, ===
=== File: deck): ===
=== File: index ===
=== File: = ===
=== File: others[player_id].has_card_index(card_value) ===
=== File: if ===
=== File: index ===
=== File: > ===
=== File: -1: ===
=== File: return ===
=== File: self.take_card(others[player_id], ===
=== File: index) ===
=== File: else: ===
=== File: ret ===
=== File: = ===
=== File: self.draw_from(deck) ===
=== File: newret ===
=== File: = ===
=== File: "Go ===
=== File: Fish! ===
=== File: - ===
=== File: %s" ===
=== File: % ===
=== File: ret ===
=== File: print ===
=== File: newret ===
=== File: return ===
=== File: newret ===
=== File: import ===
=== File: random ===
=== File: from ===
=== File: UnoPlayerObjects ===
=== File: import ===
=== File: UnoPlayer ===
=== File: class ===
=== File: AIUnoPlayer(UnoPlayer): ===
=== File: def ===
=== File: player_type(self): ===
=== File: return ===
=== File: 1 ===
=== File: def ===
=== File: card_index_in_hand(self, ===
=== File: card_str): ===
=== File: for ===
=== File: i, ===
=== File: c ===
=== File: in ===
=== File: enumerate(self.hand): ===
=== File: if ===
=== File: card_str ===
=== File: == ===
=== File: str(c): ===
=== File: return ===
=== File: i ===
=== File: return ===
=== File: -1 ===
=== File: def ===
=== File: play_card(self, ===
=== File: card_str, ===
=== File: pile): ===
=== File: ret ===
=== File: = ===
=== File: False ===
=== File: index ===
=== File: = ===
=== File: self.card_index_in_hand(card_str) ===
=== File: if ===
=== File: index ===
=== File: == ===
=== File: -1: ===
=== File: print ===
=== File: 'That ===
=== File: card ===
=== File: is ===
=== File: not ===
=== File: in ===
=== File: your ===
=== File: hand!' ===
=== File: elif ===
=== File: self.is_valid_move(self.hand[index], ===
=== File: pile.peek()): ===
=== File: pile.add(self.hand[index]) ===
=== File: self.hand ===
=== File: = ===
=== File: self.hand[:index] ===
=== File: + ===
=== File: self.hand[index ===
=== File: + ===
=== File: 1:] ===
=== File: ret ===
=== File: = ===
=== File: True ===
=== File: else: ===
=== File: print ===
=== File: 'That ===
=== File: is ===
=== File: not ===
=== File: a ===
=== File: valid ===
=== File: move!' ===
=== File: return ===
=== File: ret ===
=== File: def ===
=== File: find_best_move(self, ===
=== File: next_player, ===
=== File: pile): ===
=== File: colors ===
=== File: = ===
=== File: {'Blue':0, ===
=== File: 'Green':1, ===
=== File: 'Red':2, ===
=== File: 'Yellow':3} ===
=== File: enum_colors, ===
=== File: enum_values ===
=== File: = ===
=== File: self.enumerate_cards() ===
=== File: top ===
=== File: = ===
=== File: colors[pile.peek().color] ===
=== File: hand ===
=== File: = ===
=== File: str(self.hand) ===
=== File: move ===
=== File: = ===
=== File: 'Draw' ===
=== File: if ===
=== File: len(enum_colors[top]) ===
=== File: != ===
=== File: 0: ===
=== File: #play ===
=== File: a ===
=== File: card ===
=== File: via ===
=== File: color, ===
=== File: highest ===
=== File: priority ===
=== File: move ===
=== File: = ===
=== File: str(random.choice(enum_colors[top])) ===
=== File: if ===
=== File: len(enum_values[pile.peek().value]) ===
=== File: != ===
=== File: 0 ===
=== File: and ===
=== File: move ===
=== File: == ===
=== File: 'Draw': ===
=== File: max_colors ===
=== File: = ===
=== File: 0 ===
=== File: for ===
=== File: card ===
=== File: in ===
=== File: enum_values[pile.peek().value]: ===
=== File: color_count ===
=== File: = ===
=== File: len(enum_colors[colors[card.color]]) ===
=== File: if ===
=== File: color_count ===
=== File: > ===
=== File: max_colors: ===
=== File: max_colors ===
=== File: = ===
=== File: color_count ===
=== File: move ===
=== File: = ===
=== File: str(card) ===
=== File: if ===
=== File: 'Skip' ===
=== File: in ===
=== File: hand: ===
=== File: #a ===
=== File: skip? ===
=== File: if ===
=== File: len(next_player.hand) ===
=== File: < ===
=== File: 4 ===
=== File: or ===
=== File: move ===
=== File: == ===
=== File: 'Draw': ===
=== File: if ===
=== File: '%s ===
=== File: Skip' ===
=== File: % ===
=== File: pile.peek().color ===
=== File: in ===
=== File: hand: ===
=== File: move ===
=== File: = ===
=== File: '%s ===
=== File: Skip' ===
=== File: % ===
=== File: pile.peek().color ===
=== File: elif ===
=== File: pile.peek().type ===
=== File: == ===
=== File: 'Skip': ===
=== File: move ===
=== File: = ===
=== File: self.find_correct_color_card_combination(colors.keys(), ===
=== File: 'Skip') ===
=== File: if ===
=== File: 'Draw ===
=== File: Two' ===
=== File: in ===
=== File: hand: ===
=== File: #a ===
=== File: draw ===
=== File: two? ===
=== File: if ===
=== File: len(next_player.hand) ===
=== File: < ===
=== File: 4 ===
=== File: or ===
=== File: move ===
=== File: == ===
=== File: 'Draw': ===
=== File: if ===
=== File: '%s ===
=== File: Draw ===
=== File: Two' ===
=== File: % ===
=== File: pile.peek().color ===
=== File: in ===
=== File: hand: ===
=== File: move ===
=== File: = ===
=== File: '%s ===
=== File: Draw ===
=== File: Two' ===
=== File: % ===
=== File: pile.peek().color ===
=== File: elif ===
=== File: pile.peek().type ===
=== File: == ===
=== File: 'Draw ===
=== File: Two': ===
=== File: move ===
=== File: = ===
=== File: self.find_correct_color_card_combination(colors.keys(), ===
=== File: 'Draw ===
=== File: Two') ===
=== File: if ===
=== File: 'Reverse' ===
=== File: in ===
=== File: hand: ===
=== File: #a ===
=== File: reverse? ===
=== File: if ===
=== File: len(next_player.hand) ===
=== File: < ===
=== File: 4 ===
=== File: or ===
=== File: move ===
=== File: == ===
=== File: 'Draw': ===
=== File: if ===
=== File: '%s ===
=== File: Reverse' ===
=== File: % ===
=== File: pile.peek().color ===
=== File: in ===
=== File: hand: ===
=== File: move ===
=== File: = ===
=== File: '%s ===
=== File: Reverse' ===
=== File: % ===
=== File: pile.peek().color ===
=== File: elif ===
=== File: pile.peek().type ===
=== File: == ===
=== File: 'Reverse': ===
=== File: move ===
=== File: = ===
=== File: self.find_correct_color_card_combination(colors.keys(), ===
=== File: 'Reverse') ===
=== File: if ===
=== File: 'Wild ===
=== File: Card' ===
=== File: in ===
=== File: hand ===
=== File: and ===
=== File: move ===
=== File: == ===
=== File: 'Draw': ===
=== File: #if ===
=== File: we ===
=== File: have ===
=== File: a ===
=== File: wild, ===
=== File: should ===
=== File: we ===
=== File: play ===
=== File: it? ===
=== File: index ===
=== File: = ===
=== File: self.card_index_in_hand('Wild ===
=== File: Card') ===
=== File: self.hand[index].set_color_of_wild(self.find_max_colors()) ===
=== File: move ===
=== File: = ===
=== File: str(self.hand[index]) ===
=== File: return ===
=== File: move ===
=== File: def ===
=== File: find_correct_color_card_combination(self, ===
=== File: color_keys, ===
=== File: card_type): ===
=== File: for ===
=== File: color ===
=== File: in ===
=== File: color_keys: ===
=== File: s ===
=== File: = ===
=== File: '%s ===
=== File: %s' ===
=== File: % ===
=== File: (color, ===
=== File: card_type) ===
=== File: if ===
=== File: self.card_index_in_hand(s) ===
=== File: != ===
=== File: -1: ===
=== File: return ===
=== File: s ===
=== File: def ===
=== File: enumerate_cards(self): ===
=== File: colors ===
=== File: = ===
=== File: [[], ===
=== File: [], ===
=== File: [], ===
=== File: []] ===
=== File: #blue, ===
=== File: green, ===
=== File: red, ===
=== File: yellow ===
=== File: values ===
=== File: = ===
=== File: [[], ===
=== File: [], ===
=== File: [], ===
=== File: [], ===
=== File: [], ===
=== File: [], ===
=== File: [], ===
=== File: [], ===
=== File: [], ===
=== File: [], ===
=== File: []] ===
=== File: for ===
=== File: card ===
=== File: in ===
=== File: self.hand: ===
=== File: if ===
=== File: card.value ===
=== File: > ===
=== File: -1: ===
=== File: values[card.value].append(card) ===
=== File: if ===
=== File: card.color ===
=== File: == ===
=== File: 'Blue': ===
=== File: colors[0].append(card) ===
=== File: elif ===
=== File: card.color ===
=== File: == ===
=== File: 'Green': ===
=== File: colors[1].append(card) ===
=== File: elif ===
=== File: card.color ===
=== File: == ===
=== File: 'Red': ===
=== File: colors[2].append(card) ===
=== File: elif ===
=== File: card.color ===
=== File: == ===
=== File: 'Yellow': ===
=== File: colors[3].append(card) ===
=== File: return ===
=== File: colors, ===
=== File: values ===
=== File: def ===
=== File: find_max_colors(self): ===
=== File: max_list ===
=== File: = ===
=== File: [] ===
=== File: colors ===
=== File: = ===
=== File: [[], ===
=== File: [], ===
=== File: [], ===
=== File: []] ===
=== File: for ===
=== File: card ===
=== File: in ===
=== File: self.hand: ===
=== File: if ===
=== File: card.color ===
=== File: == ===
=== File: 'Blue': ===
=== File: colors[0].append(card) ===
=== File: elif ===
=== File: card.color ===
=== File: == ===
=== File: 'Green': ===
=== File: colors[1].append(card) ===
=== File: elif ===
=== File: card.color ===
=== File: == ===
=== File: 'Red': ===
=== File: colors[2].append(card) ===
=== File: elif ===
=== File: card.color ===
=== File: == ===
=== File: 'Yellow': ===
=== File: colors[3].append(card) ===
=== File: for ===
=== File: l ===
=== File: in ===
=== File: colors: ===
=== File: if ===
=== File: len(l) ===
=== File: > ===
=== File: len(max_list): ===
=== File: max_list ===
=== File: = ===
=== File: l ===
=== File: if ===
=== File: len(max_list) ===
=== File: == ===
=== File: 0: ===
=== File: return ===
=== File: random.choice(['Blue', ===
=== File: 'Green', ===
=== File: 'Red', ===
=== File: 'Yellow']) ===
=== File: return ===
=== File: max_list[0].color ===
=== File: from ===
=== File: CardObjects ===
=== File: import ===
=== File: Card ===
=== File: from ===
=== File: PlayerObjects ===
=== File: import ===
=== File: Player ===
=== File: from ===
=== File: DeckObjects ===
=== File: import ===
=== File: Deck ===
=== File: from ===
=== File: DiscardPileObjects ===
=== File: import ===
=== File: DiscardPile ===
=== File: from ===
=== File: TrickObjects ===
=== File: import ===
=== File: Trick ===
=== File: class ===
=== File: Table(object): ===
=== File: def ===
=== File: __init__(self, ===
=== File: player_count=2): ===
=== File: self.players ===
=== File: = ===
=== File: [] ===
=== File: self.deck ===
=== File: = ===
=== File: Deck() ===
=== File: self.deck.shuffle() ===
=== File: self.discard ===
=== File: = ===
=== File: DiscardPile() ===
=== File: self.trick ===
=== File: = ===
=== File: Trick() ===
=== File: self.trick.cards ===
=== File: = ===
=== File: [] ===
=== File: for ===
=== File: i ===
=== File: in ===
=== File: range(player_count): ===
=== File: self.players.append(Player()) ===
=== File: def ===
=== File: deal(self, ===
=== File: num_cards): ===
=== File: if ===
=== File: num_cards ===
=== File: * ===
=== File: len(self.players) ===
=== File: > ===
=== File: len(self.deck.cards): ===
=== File: raise ===
=== File: IndexError ===
=== File: for ===
=== File: i ===
=== File: in ===
=== File: range(num_cards): ===
=== File: for ===
=== File: player ===
=== File: in ===
=== File: self.players: ===
=== File: player.draw_from(self.deck) ===
=== File: def ===
=== File: deal_all(self): ===
=== File: player ===
=== File: = ===
=== File: 0 ===
=== File: while ===
=== File: len(self.deck.cards) ===
=== File: > ===
=== File: 0: ===
=== File: self.players[player].draw_from(self.deck) ===
=== File: player ===
=== File: = ===
=== File: (player ===
=== File: + ===
=== File: 1) ===
=== File: % ===
=== File: len(self.players) ===
=== File: def ===
=== File: play_game(self): ===
=== File: while ===
=== File: not ===
=== File: self.winner(): ===
=== File: self.trick.cards ===
=== File: = ===
=== File: [] ===
=== File: self.deal(1) ===
=== File: for ===
=== File: player ===
=== File: in ===
=== File: self.players: ===
=== File: self.trick.cards.append(player.play_card()) ===
=== File: return ===
=== File: self.winner() ===
=== File: def ===
=== File: winner(self): ===
=== File: if ===
=== File: len(self.trick.cards) ===
=== File: > ===
=== File: 0: ===
=== File: if ===
=== File: self.trick.cards[0] ===
=== File: > ===
=== File: self.trick.cards[1]: ===
=== File: return ===
=== File: self.players[0] ===
=== File: elif ===
=== File: self.trick.cards[0] ===
=== File: < ===
=== File: self.trick.cards[1]: ===
=== File: return ===
=== File: self.players[1] ===
=== File: import ===
=== File: unittest ===
=== File: from ===
=== File: CardTests ===
=== File: import ===
=== File: * ===
=== File: from ===
=== File: DeckTests ===
=== File: import ===
=== File: * ===
=== File: from ===
=== File: DiscardPileTests ===
=== File: import ===
=== File: * ===
=== File: from ===
=== File: PlayerTests ===
=== File: import ===
=== File: * ===
=== File: from ===
=== File: TableTests ===
=== File: import ===
=== File: * ===
=== File: from ===
=== File: GoFishTableTests ===
=== File: import ===
=== File: * ===
=== File: from ===
=== File: GoFishPlayerTests ===
=== File: import ===
=== File: * ===
=== File: from ===
=== File: GoFishHumanPlayerTests ===
=== File: import ===
=== File: * ===
=== File: from ===
=== File: GoFishAIPlayerTests ===
=== File: import ===
=== File: * ===
=== File: from ===
=== File: GoFishPlayerTests ===
=== File: import ===
=== File: * ===
=== File: from ===
=== File: GoFishTableTests ===
=== File: import ===
=== File: * ===
=== File: #from ===
=== File: TwentyFourTests ===
=== File: import ===
=== File: * ===
=== File: load ===
=== File: = ===
=== File: unittest.TestLoader().loadTestsFromTestCase ===
=== File: suites ===
=== File: = ===
=== File: map(load, ===
=== File: [TestCard, ===
=== File: TestDeck, ===
=== File: TestDiscardPile, ===
=== File: TestPlayer, ===
=== File: TestTable, ===
=== File: TestGoFishTable, ===
=== File: TestGoFishPlayer, ===
=== File: TestGoFishHumanPlayer, ===
=== File: TestGoFishAIPlayer]) ===
=== File: alltests ===
=== File: = ===
=== File: unittest.TestSuite(suites) ===
=== File: unittest.TextTestRunner(verbosity=1).run(alltests) ===
=== File: from ===
=== File: CardObjects ===
=== File: import ===
=== File: Card ===
=== File: class ===
=== File: Trick(object): ===
=== File: def ===
=== File: __init__(self): ===
=== File: self.cards ===
=== File: = ===
=== File: [] ===
=== File: from ===
=== File: DeckObjects ===
=== File: import ===
=== File: Deck ===
=== File: class ===
=== File: Player(object): ===
=== File: def ===
=== File: __init__(self, ===
=== File: name ===
=== File: = ===
=== File: ''): ===
=== File: self.hand ===
=== File: = ===
=== File: [] ===
=== File: self.name ===
=== File: = ===
=== File: name ===
=== File: def ===
=== File: __str__(self): ===
=== File: return ===
=== File: self.name ===
=== File: def ===
=== File: draw_from(self, ===
=== File: deck): ===
=== File: try: ===
=== File: self.hand.insert(0, ===
=== File: deck.draw()) ===
=== File: except: ===
=== File: pass ===
=== File: def ===
=== File: has_card_index(self, ===
=== File: value): ===
=== File: for ===
=== File: i ===
=== File: in ===
=== File: range(len(self.hand)): ===
=== File: if ===
=== File: self.hand[i].value ===
=== File: == ===
=== File: value: ===
=== File: return ===
=== File: i ===
=== File: return ===
=== File: -1 ===
=== File: def ===
=== File: play_card(self): ===
=== File: return ===
=== File: self.hand.pop() ===
=== File: from ===
=== File: PlayerObjects ===
=== File: import ===
=== File: Player ===
=== File: from ===
=== File: CardObjects ===
=== File: import ===
=== File: Card ===
=== File: class ===
=== File: ERSPlayer(Player): ===
=== File: def ===
=== File: __init__(self): ===
=== File: pass ===
=== File: def ===
=== File: flip(self): ===
=== File: pass ===
=== File: def ===
=== File: slap(self, ===
=== File: card): ===
=== File: pass ===
=== File: from ===
=== File: pygamehelper ===
=== File: import ===
=== File: * ===
=== File: from ===
=== File: pygame ===
=== File: import ===
=== File: * ===
=== File: from ===
=== File: pygame.locals ===
=== File: import ===
=== File: * ===
=== File: from ===
=== File: CardObjects ===
=== File: import ===
=== File: Card ===
=== File: from ===
=== File: DeckObjects ===
=== File: import ===
=== File: Deck ===
=== File: from ===
=== File: GoFishTableObjects ===
=== File: import ===
=== File: GoFishTable ===
=== File: class ===
=== File: GoFishGUI(PygameHelper): ===
=== File: def ===
=== File: __init__(self): ===
=== File: #constants: ===
=== File: sizes, ===
=== File: colors, ===
=== File: etc. ===
=== File: self.w ===
=== File: = ===
=== File: 1200 ===
=== File: self.h ===
=== File: = ===
=== File: 800 ===
=== File: self.card_w ===
=== File: = ===
=== File: int(72 ===
=== File: / ===
=== File: 1.5) ===
=== File: self.card_h ===
=== File: = ===
=== File: int(96 ===
=== File: / ===
=== File: 1.5) ===
=== File: self.turn_button_dim ===
=== File: = ===
=== File: (65, ===
=== File: 15) ===
=== File: self.card_spacing ===
=== File: = ===
=== File: self.card_h ===
=== File: self.deck_x ===
=== File: = ===
=== File: 500 ===
=== File: self.deck_y ===
=== File: = ===
=== File: 300 ===
=== File: self.hand_area_x ===
=== File: = ===
=== File: 0 ===
=== File: self.hand_area_y ===
=== File: = ===
=== File: 640 ===
=== File: self.message_x ===
=== File: = ===
=== File: 400 ===
=== File: self.message_y ===
=== File: = ===
=== File: 750 ===
=== File: self.score_x ===
=== File: = ===
=== File: 0 ===
=== File: self.score_y ===
=== File: = ===
=== File: 0 ===
=== File: self.selected_player ===
=== File: = ===
=== File: (0, ===
=== File: 20) ===
=== File: self.turn_label ===
=== File: = ===
=== File: (0, ===
=== File: 40) ===
=== File: self.turn_button ===
=== File: = ===
=== File: (0, ===
=== File: 60) ===
=== File: self.color_background ===
=== File: = ===
=== File: (51, ===
=== File: 204, ===
=== File: 66) ===
=== File: self.color_draw ===
=== File: = ===
=== File: (0, ===
=== File: 0, ===
=== File: 255) ===
=== File: self.color_next ===
=== File: = ===
=== File: (255, ===
=== File: 0, ===
=== File: 0) ===
=== File: #general ===
=== File: set ===
=== File: up ===
=== File: PygameHelper.__init__(self, ===
=== File: size=(self.w, ===
=== File: self.h), ===
=== File: fill=((255, ===
=== File: 255, ===
=== File: 255)), ===
=== File: title='Go ===
=== File: Fish') ===
=== File: pygame.draw.rect(self.screen, ===
=== File: self.color_background, ===
=== File: (0, ===
=== File: 0, ===
=== File: self.w, ===
=== File: self.h)) ===
=== File: self.label_font ===
=== File: = ===
=== File: pygame.font.Font(None, ===
=== File: 18) ===
=== File: self.message_font ===
=== File: = ===
=== File: pygame.font.Font(None, ===
=== File: 20) ===
=== File: #load ===
=== File: card ===
=== File: images ===
=== File: self.clubs ===
=== File: = ===
=== File: [] ===
=== File: self.diamonds ===
=== File: = ===
=== File: [] ===
=== File: self.hearts ===
=== File: = ===
=== File: [] ===
=== File: self.spades ===
=== File: = ===
=== File: [] ===
=== File: for ===
=== File: i ===
=== File: in ===
=== File: range(1, ===
=== File: 14): ===
=== File: self.clubs.append(pygame.transform.scale(pygame.image.load('images/C%s.png' ===
=== File: % ===
=== File: i), ===
=== File: (self.card_w, ===
=== File: self.card_h))) ===
=== File: self.diamonds.append(pygame.transform.scale(pygame.image.load('images/D%s.png' ===
=== File: % ===
=== File: i), ===
=== File: (self.card_w, ===
=== File: self.card_h))) ===
